from tensorflow.keras.applications import VGG16, InceptionV3, ResNet50
import tensorflow as tf
import metrics
IMG_SIZE = 128
NUM_CLASSES = 25


class MalwareModelsDispatcher:
    def __init__(self, optimizer='adam', loss_fn='categorical_crossentropy'):
        self.img_shape = (IMG_SIZE, IMG_SIZE, 3)
        self.optimizer = optimizer
        self.loss_fn = loss_fn

    def get_top(self):
        global_average_layer = tf.keras.layers.GlobalAveragePooling2D()
        prediction_layer = tf.keras.layers.Dense(NUM_CLASSES, activation='softmax')
        return [global_average_layer, prediction_layer]

    def compile(self, model):
        model.compile(loss=self.loss_fn, optimizer=self.optimizer,
                      metrics=['accuracy', metrics.f1_m, metrics.precision_m, metrics.recall_m])
        return model

    def vgg16_model(self):
        model = VGG16(input_shape=self.img_shape,
                      include_top=False,
                      weights='imagenet')

        model.trainable = False
        top = self.get_top()
        model = tf.keras.Sequential([model]+top)
        model = self.compile(model)
        return model, "vgg16"

    def inceptionv3_model(self):
        model = InceptionV3(input_shape=self.img_shape,
                            include_top=False,
                            weights='imagenet')

        model.trainable = False
        top = self.get_top()
        model = tf.keras.Sequential([model] + top)
        model = self.compile(model)
        return model, "inceptionv3"

    def resnet50_model(self):
        model = ResNet50(input_shape=self.img_shape,
                         include_top=False,
                         weights='imagenet')

        model.trainable = False
        top = self.get_top()
        model = tf.keras.Sequential([model] + top)
        model = self.compile(model)
        return model,"resnet50"

