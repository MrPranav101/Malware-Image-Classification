from os import X_OK
from malimg import MaliMgClassification
import pickle
from models import MalwareModelsDispatcher

class Execute:
    def inceptionv3_model(ddir,cdir):
        pipe = MaliMgClassification(datadir=ddir,checkpointdir=cdir)
        model_dispatcher = MalwareModelsDispatcher()

        model,modelname = model_dispatcher.inceptionv3_model()
        pipe.prepare_df()
        pipe.set_classifier(model)
        history, scores = pipe.train(n_splits=10, epochs=50,model_name=modelname)
        

    def resnet50(ddir,cdir):
        pipe = MaliMgClassification(datadir=ddir,checkpointdir=cdir)
        model_dispatcher = MalwareModelsDispatcher()

        model,modelname = model_dispatcher.resnet50_model()
        pipe.prepare_df()
        pipe.set_classifier(model)
        history, scores = pipe.train(n_splits=10, epochs=50,model_name=modelname)


    def vgg16(ddir,cdir):
        pipe = MaliMgClassification(datadir=ddir,checkpointdir=cdir)
        model_dispatcher = MalwareModelsDispatcher()

        model,modelname = model_dispatcher.vgg16_model()
        pipe.prepare_df()
        pipe.set_classifier(model)
        history, scores = pipe.train(n_splits=10, epochs=50,model_name=modelname)

    def cnnsvm(ddir,cdir):
        pipe = MaliMgClassification(datadir=ddir,checkpointdir=cdir)
        model_dispatcher = MalwareModelsDispatcher(optimizer='adadelta',loss_fn='hinge')

        model,modelname = model_dispatcher.CNNSVM_model()
        pipe.prepare_df()
        pipe.set_classifier(model)
        history, scores = pipe.train(n_splits=10, epochs=50,model_name=modelname)
        
    def mlpsvm(ddir,cdir):
        pipe = MaliMgClassification(datadir=ddir,checkpointdir=cdir)
        model_dispatcher = MalwareModelsDispatcher(optimizer='adadelta',loss_fn='hinge')

        model,modelname = model_dispatcher.MLPSVM_model()
        pipe.prepare_df()
        pipe.set_classifier(model)
        history, scores = pipe.train(n_splits=10, epochs=50,model_name=modelname)

# if __name__ == '__main__':
#     Execute.inceptionv3_model(ddir="../data/",cdir="../checkpoints/") # insert path as variable in all function calls
    # Execute.resnet50("../data/","../checkpoints/") # insert path as variable in all function calls
    # Execute.vgg16("../data/","../checkpoints/") # insert path as variable in all function calls