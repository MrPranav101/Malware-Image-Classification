from tensorflow.keras.preprocessing.image import ImageDataGenerator

from sklearn.model_selection import StratifiedKFold, train_test_split
import numpy as np

from tqdm import tqdm


class MaliMgClassification:
    def __init__(self):
        self.target_size = (128, 128)
        self.random_state = 42
        self.classifier = None
        self.DATADIR = '../Data/malimg_paper_dataset_imgs/'
        self.dataset = self.history = self.scores = None
        self.train_imgs = self.test_imgs = self.train_labels = self.test_labels = None

    def set_classifier(self, classifier):
        self.classifier = classifier

    def prepare_df(self):
        self.dataset = ImageDataGenerator(
            rescale=1. / 255,
            rotation_range=40,
            width_shift_range=0.2,
            height_shift_range=0.2,
            shear_range=0.2,
            zoom_range=0.2,
            horizontal_flip=True,
            fill_mode='nearest') \
            .flow_from_directory(directory=self.DATADIR, target_size=self.target_size,
                                 batch_size=10000, class_mode='categorical')

    def split_data(self):
        imgs, labels = next(self.dataset)
        self.train_imgs, self.test_imgs, self.train_labels, self.test_labels = \
            train_test_split(imgs, labels, test_size=0.20, random_state=self.random_state, stratify=labels)

    def train(self, n_splits=10, epochs=10):
        skf = StratifiedKFold(n_splits=n_splits, random_state=self.random_state, shuffle=True)
        self.split_data()
        history = {}
        scores = {}
        model = self.classifier
        for i, (train_index, test_index) in tqdm(enumerate(skf.split(self.train_imgs,
                                                                     np.zeros(shape=(len(self.train_imgs),
                                                                                     1))))):
            print('#'*10, ' '*5, f'training_fold__{i}', ' '*5, '#'*10)
            x_train, x_test = self.train_imgs[train_index], self.train_imgs[test_index]
            y_train, y_test = self.train_labels[train_index], self.train_labels[test_index]
            history["fold" + f"_{i}"] = model.fit(x_train, y_train, validation_data=(x_test, y_test),
                                                  epochs=epochs)

            scores["fold" + f"_{i}"] = model.evaluate(self.train_imgs[test_index], self.train_labels[test_index],
                                                      verbose=0)
        self.history = history
        self.scores = scores
        return history, scores
